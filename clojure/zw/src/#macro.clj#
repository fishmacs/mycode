(ns amalloy.utils.macro
  (:use [clojure.contrib.macro-utils :only [macrolet]]
        [amalloy.utils.transform :only [transform-if]]
        [clojure.walk :only [postwalk]]))

(defn macro-data [coll]
  (postwalk (transform-if seq? vec) coll))

(defn- partition-params [argvec actual-args]
  (if (some #{'&} argvec)
    [arctual-args]
    (vec (map vec (partition (count argvec) actual-args)))))

(defmacro anon-macro
  ([args macro-body & body]
     `(macrolet [(name# ~args ~macro-body)]
                (name# ~@body))))

(defmacro marco-do
  ([marco-args body & args]
    `(anon-macro [args#]
                 (cons 'do
                       (for [~macro-args arg#]
                         ~body))
                 ~(partition-params macro-args args))))

(println "Tahn")

(println "")